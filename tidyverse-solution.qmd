---
title: "Solution: Introduction to the tidyverse"
author: "Kevin Rue-Albrecht"
date: "2024-10-15"
date-format: long
format: html
---

```{r}
#| label: load-packages
#| include: false

library(tidyverse)
library(ggplot2)
```

## Demo

- Load the tidyverse

```{r}
library(tidyverse)
```

- Load a single package from the tidyverse

```{r}
library(ggplot2)
```

## Demo

### The pipe operator

```{r}
x <- 4
x %>% sqrt()
```

```{r}
x <- 4
sqrt(x)
```

```{r}
iris %>% 
  ggplot(aes(Sepal.Length, Sepal.Width)) +
  geom_point()
```

## Demo

### The tidyverse philosophy

```{r}
iris %>%
    select(Sepal.Length, Sepal.Width, Species) %>%
    slice_head(n = 3)
```

## Exercise

### Read and write files

- Read data from the file `iris.csv`.
  Assign the data imported from the file to an object called `iris_raw`.

```{r}
iris_raw <- read_csv(
	"/project/shared/r/1_r_data_science/6-tidyverse/iris.csv",
	col_types = cols(
	  sepal_length = col_double(),
	  sepal_width = col_double(),
	  petal_length = col_double(),
	  petal_width = col_double(),
	  species = col_character()
	)
)
```

```{r}
str(iris_raw)
```


```{r}
spec(iris_raw)
```


**What do you learn about the data from the messages displayed in the R console while the contents of the file are parsed and imported into your R session?**

> Answer:
> - Number of rows and columns in the data set.
> - Delimiter used to parse the file.
> - Name and type of individual columns.
> - Hints about some functions and options that can be used.

- Print the value of `iris_raw`.

```{r}
iris_raw
```

**What is the class of the data? What are the dimensions of the dataset? What is the type of data stored in each column?**

> Answer:
> - Data are loaded as a `tibble`.
> - Data set is 150 rows and 5 columns.
> - Column types are: double, double, double, double, character.

- Write the dataset to a file named `iris.tsv`, separating fields with the tabulation character.

```{r}
write_tsv(iris_raw, "iris.tsv")
write.table(iris_raw, "iris-base.tsv", sep = "\t")
```

**What function do you use? What options are available for that function?**

> Answer:
> - `write.tsv()` is the ideal choice here.
> - Options can be found on the man page, using `?write.tsv`.

- Inspect the `iris.tsv` file.
  You can use `file.edit()` to open the file in the RStudio editor.

```{r}
#| eval: false

file.edit("iris.tsv")
```

**Are you satisfied with the contents and appearance of the file?**

> Answer:
> - The file is as expected.
> - Not the nicest to read, due to column names wider than values.

## Demo

### Making a tibble

```{r}
tibble(x = 1:5, y = 1, z = x ^ 2 + y)
```

## Demo

### Subset the columns of a table

```{r}
iris %>%
    select(Sepal.Length, Sepal.Width) %>% 
    slice_head(n = 6)
```

```{r}
iris %>%
    select(starts_with("Petal") | ends_with("Width")) %>% 
    slice_head(n = 6)
```

```{r}
iris %>%
    select(!ends_with("Width")) %>% 
    slice_head(n = 6)
```

```{r}
iris %>%
    select(!c(Sepal.Length, Petal.Length)) %>% 
    slice_head(n = 6)
```

## Demo

### Create and update columns in a table

```{r}
iris %>%
    mutate(
        ID = seq(1, nrow(iris)),
        Flower.ID = paste0(Species, ID)
        ) %>%
    slice_head(n = 6)
```

## Demo

### Subset observations in a table

```{r}
iris %>%
    filter(Sepal.Length > mean(Sepal.Length) & Sepal.Width > mean(Sepal.Width)) %>%
    as_tibble()
```

## Demo

### Compute summary statistics

Without grouping

```{r}
iris %>%
    summarise(Sepal.Length.mean = mean(Sepal.Length))
```

With grouping

```{r}
iris %>%
    group_by(Species) %>%
    summarise(Sepal.Length.mean = mean(Sepal.Length))
```

## Demo

### Sort observations

```{r}
iris %>%
    arrange(Species, desc(Sepal.Length)) %>%
    as_tibble()
```

## Demo

### Extract a single column as a vector

Without names

```{r}
iris %>%
    pull(Sepal.Length) %>%
    head(5)
```

With names

```{r}
iris %>%
    pull(Sepal.Length, name = Species) %>%
    head(5)
```

## Demo

### Combine two tables using shared information

```{r}
tibble_1 <- tibble(
  ID = paste0("sample", 1:4),
  gene1 = rbinom(4, 10, 0.5),
  gene2 = rbinom(4, 10, 0.5)
)
tibble_1
```

```{r}
tibble_2 <- tibble(
  ID = paste0("sample", 1:4),
  batch = factor(rep(c("A", "B"), each = 2)),
  condition = factor(rep(c("control", "treated"), times = 2)),
)
tibble_2
```

**How would you describe how to join these two tibbles?**

```{r}
tibble_joined <- left_join(tibble_1, tibble_2, by = "ID")
tibble_joined
```

## Exercise

### Manipulate data

#### Exercise 1

- Using `iris_raw`, for each species of iris, compute the following summary statistics for the `sepal_length`: mean, median, minimum, maximum.

```{r}
iris_raw %>% 
    group_by(species) %>% 
    summarise(
        min = min(sepal_length),
        mean = mean(sepal_length),
        median = median(sepal_length),
        max = max(sepal_length)
    )
```

#### Exercise 2

- For each species of iris, compute the mean of every column that is numeric.
  **Hint:** use the functions `dplyr::across()`, `tidyselect::where()`, and `base::is.numeric()`.

```{r}
iris_raw %>% 
    group_by(species) %>% 
    summarise(across(where(is.numeric), mean))


# iris_raw %>% 
#     group_by(species) %>% 
#     summarise(across(c(sepal_length, sepal_width, petal_length, petal_width), mean))
```

- Filter the table above to retain only species of iris with an average sepal length less than `6`.

```{r}
# Copy the code chunk above and extend with more pipes
iris_raw %>% 
    group_by(species) %>% 
    summarise(across(where(is.numeric), mean)) %>% 
    filter(sepal_length < 6)
```

- Sort the table above by descending `sepal_length`.

```{r}
# Copy the code chunk above and extend with more pipes
iris_raw %>% 
    group_by(species) %>% 
    summarise(across(where(is.numeric), mean)) %>% 
    filter(sepal_length < 6) %>% 
    arrange(desc(sepal_length))
```

- From the table above, extract the `sepal_length` column as a numeric vector.
  Make it a named numeric vector, where each value is named with the corresponding species.

```{r}
# Copy the code chunk above and extend with more pipes
iris_raw %>% 
    group_by(species) %>% 
    summarise(across(where(is.numeric), mean)) %>% 
    filter(sepal_length < 6) %>% 
    arrange(desc(sepal_length)) %>% 
    pull(sepal_length, name = species)
```

## Exercise

### Manipulate data

#### Exercise 3

Let's make the silly assumption that iris sepals are rectangular in shape.

- Using `iris_raw`, compute a new column named `sepal_area`, which is the product of `sepal_length` and `sepal_width`.

```{r}
iris_raw %>% 
    mutate(
        sepal_area = sepal_length * sepal_width
    )
```

- Subset the result to the columns named `species` and `sepal_area`.

```{r}
# Copy the code chunk above and extend with more pipes
iris_raw %>% 
    mutate(
        sepal_area = sepal_length * sepal_width
    ) %>% 
    select(species, sepal_area)
```

- Subset the result to display the top 5 observations by `sepal_area`.

```{r}
# Copy the code chunk above and extend with more pipes
iris_raw %>% 
    mutate(
        sepal_area = sepal_length * sepal_width
    ) %>% 
    select(species, sepal_area) %>% 
    slice_max(sepal_area, n = 5)
```

#### Bonus point

- Make a histogram of `sepal_area` colored by species.

You might also want to facet the plot by species.

```{r}
# Copy the code chunk above and extend with more pipes
iris_for_ggplot <- iris_raw %>% 
    mutate(
        sepal_area = sepal_length * sepal_width
    ) %>% 
    select(species, sepal_area)
iris_for_ggplot
```

```{r}
iris_raw %>% 
    mutate(
        sepal_area = sepal_length * sepal_width
    ) %>% 
    select(species, sepal_area) %>% 
	ggplot(aes(sepal_area, fill = species)) +
    geom_histogram() +
    facet_wrap(~species, ncol = 1)
```

## Exercise

### Pivot data from wide to long

Reshape the `iris_raw` dataset in a tidy format where one observation is represented by:

- the species

- the variable measured

- the value

**Hint:** you want to pivot all the columns that start are numeric.

```{r}
iris_long <- iris_raw %>% 
  pivot_longer(where(is.numeric), names_to = "variable")
iris_long
```

```{r}
ggplot(iris_long, aes(x = value)) +
	geom_histogram() +
	facet_wrap(~variable)
```


**What information have we lost in the process? What could we do to remedy the issue?**

> Answer:
> The identity of each observation is lost;
> e.g., we cannot tell which value of `sepal_length` is associated with which value of `sepal_width`.

```{r}
# Copy the code chunk above and refine to address the issue
iris_long2 <- iris_raw %>% 
  mutate(specimen = row_number()) %>% 
  pivot_longer(c(starts_with("Sepal"), starts_with("Petal")), names_to = "variable")
iris_long2
```

## Exercise

### Pivot data from long to wide

- Reshape the tidy format of the iris data set into the original wide format.

**Hint:** you will only be able to restore the wide format if you kept track of the identity of each flower in the long format.

```{r}
iris_long2 %>% 
      pivot_wider(
      	# id_cols = c(specimen, species),
      	names_from = variable
      	# values_from = value
      ) %>% 
	select(-specimen)
```

## Demo

### Split a column value into multiple columns

```{r}
iris %>% 
    separate(Sepal.Length, c("Sepal.Length.unit", "Sepal.Length.decimal"), sep = "[.]") %>%
    select(c("Sepal.Length.unit", "Sepal.Length.decimal")) %>%
    as_tibble()
```

## Demo

### Combine multiple columns into a single value

```{r}
iris %>% 
  mutate(ID = seq(1, nrow(iris))) %>% 
  unite("FlowerID", Species, ID, sep = "_") %>% 
  as_tibble()
```

## Demo

### Extract substrings

```{r}
iris_species <- iris %>%
    pull(Species)
```

```{r}
iris_species %>%
    str_sub(1, 3) %>%
    unique()
```

```{r}
str_sub(iris_species, 4) <- "..."
iris_species %>%
    unique()
```

## Demo

### Join multiple strings and remove whitespaces

```{r}
words <- c("A ", " few ", "words")
words
```

```{r}
words %>%
    str_trim()
```

```{r}
words %>%
    str_trim() %>%
    str_c(collapse = " ")
```
